from aiogram import executor
from loader import dp
from aiogram import Bot, Dispatcher, executor, types, utils
from aiogram.dispatcher import FSMContext

from session_check import SessionCheck


@dp.message_handler(commands=['start'])  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º.
async def send_welcome(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text='–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å‚ùì'),
            types.KeyboardButton(text='–°–ø–∏—Å–∫–∏ üìã')
        ],
        [
            types.KeyboardButton(text='–ö–Ω–∏–∂–∫–∏ üìö'),
            types.KeyboardButton(text='–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚è∞')
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await state.set_state(SessionCheck.start)
    x = await state.get_state()
    if x == 'SessionCheck:start':
    # –¢–∞–∫ –∫–∞–∫ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º await.
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç!\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É. {x}",
                        reply_markup=keyboard)
    else:
        await message.reply(f"–ü–æ–∫–∞!\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É. {x}",
                        reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)