from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text

from keyboards.default.start_keyboard import start_keyboard
from loader import dp


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç!\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É. ",
                        reply_markup=start_keyboard)


# TODO: –∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
@dp.message_handler(Text(startswith="–°–ø–∏—Å–∫–∏"))
async def with_puree(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text='–≠–º–æ—Ü–∏–∏ üåã'),
            types.KeyboardButton(text='–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞ üè°')
        ],
        [
            types.KeyboardButton(text='–†–∞–±–æ—Ç–∞/—É—á–µ–±–∞ üíº')
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=keyboard)


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)


def register_handlers_start(dispatcher: Dispatcher):
    dispatcher.register_message_handler(send_welcome, commands=['start'])
    dispatcher.register_message_handler(with_puree, lambda msg: msg.text.lower() == '–°–ø–∏—Å–∫–∏')
    dispatcher.register_message_handler(echo)
