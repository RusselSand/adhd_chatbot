from aiogram import Bot, Dispatcher, executor, types, utils
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from telegram_bot.session_check import SessionCheck


@dp.message_handler(commands=['start'])  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º.
async def send_welcome(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text='–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å‚ùì'),
            types.KeyboardButton(text='–°–ø–∏—Å–∫–∏ üìã')
        ],
        [
            types.KeyboardButton(text='–ö–Ω–∏–∂–∫–∏ üìö'),
            types.KeyboardButton(text='–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚è∞')
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await state.set_state(SessionCheck.start)
    x = await state.get_state()
    if x == 'SessionCheck:start':
    # –¢–∞–∫ –∫–∞–∫ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º await.
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç!\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É. {x}",
                        reply_markup=keyboard)
    else:
        await message.reply(f"–ü–æ–∫–∞!\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É. {x}",
                        reply_markup=keyboard)


@dp.message_handler(Text("–°–ø–∏—Å–∫–∏ üìã"))
async def with_puree(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text='–≠–º–æ—Ü–∏–∏ üåã'),
            types.KeyboardButton(text='–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞ üè°')
        ],
        [
            types.KeyboardButton(text='–†–∞–±–æ—Ç–∞/—É—á–µ–±–∞ üíº')
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", reply_markup=keyboard)


# ToDo: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏
@dp.message_handler(Text(startswith="–≠–º–æ—Ü–∏–∏"))
async def with_puree(message: types.Message):
    buttons = [
        [
            types.InlineKeyboardButton(text='–ó–ª–æ—Å—Ç—å', callback_data="emotion_angry"),
            types.InlineKeyboardButton(text='–ì—Ä—É—Å—Ç—å',  callback_data="emotion_sad")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply("–í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ —Å–µ–π—á–∞—Å –±–ª–∏–∂–µ –≤—Å–µ–≥–æ: ", reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="emotion_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    if action == "angry":
        text = """
        –ï—Å–ª–∏ —è —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω/–∑–æ–ª: 
        1. –û—Å—Ç–∞–≤–∏—Ç—å –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä—ã–º —è –∑–∞–Ω–∏–º–∞—é—Å—å, —Å—Ä–∞–∑—É. 
        2. –ü–æ–¥—É–º–∞—Ç—å, –∫–∞–∫–∞—è –º–æ—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç—Å—è —Å–µ–π—á–∞—Å
        3. –°–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º, –µ—Å–ª–∏ –º–Ω–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å. 
        4. –í–∑—è—Ç—å –ø–∞—É–∑—É 5-10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è. –ü—Ä–æ–≥—É–ª—è—Ç—å—Å—è, –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã, –ø–æ–ª–µ–∂–∞—Ç—å, –ø–æ—Ä–≤–∞—Ç—å –ø–∞–∫–µ—Ç. 
        5. –ù–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –∏–ª–∏ –≤–º–µ—Å—Ç–µ.
        """
        await bot.send_message(callback.from_user.id, text)
        #await message.reply("–í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ —Å–µ–π—á–∞—Å –±–ª–∏–∂–µ –≤—Å–µ–≥–æ: –∑–ª–æ—Å—Ç—å")
    # elif action == "sad":
        #await message.reply("–í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ —Å–µ–π—á–∞—Å –±–ª–∏–∂–µ –≤—Å–µ–≥–æ: –ø–µ—á–∞–ª—å")


@dp.message_handler()
# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
async def echo(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    await message.answer(message.text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
